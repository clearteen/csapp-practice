***********************
The CS:APP Data Lab
Directions to Students
***********************

Your goal is to modify your copy of bits.c so that it passes all the
tests in btest without violating any of the coding guidelines.


*********
0. Files:
*********

Makefile	- Makes btest, fshow, and ishow
README		- This file
bits.c		- The file you will be modifying and handing in
bits.h		- Header file
btest.c		- The main btest program
  btest.h	- Used to build btest
  decl.c	- Used to build btest
  tests.c       - Used to build btest
  tests-header.c- Used to build btest
dlc*		- Rule checking compiler binary (data lab compiler)	 
driver.pl*	- Driver program that uses btest and dlc to autograde bits.c
Driverhdrs.pm   - Header file for optional "Beat the Prof" contest
fshow.c		- Utility for examining floating-point representations
ishow.c		- Utility for examining integer representations

***********************************************************
1. Modifying bits.c and checking it for compliance with dlc
***********************************************************

IMPORTANT: Carefully read the instructions in the bits.c file before
you start. These give the coding rules that you will need to follow if
you want full credit.

Use the dlc compiler (./dlc) to automatically check your version of
bits.c for compliance with the coding guidelines:

       unix> ./dlc bits.c

dlc returns silently if there are no problems with your code.
Otherwise it prints messages that flag any problems.  Running dlc with
the -e switch:

    	unix> ./dlc -e bits.c  

causes dlc to print counts of the number of operators used by each function.

Once you have a legal solution, you can test it for correctness using
the ./btest program.

*********************
2. Testing with btest
*********************

The Makefile in this directory compiles your version of bits.c with
additional code to create a program (or test harness) named btest.

To compile and run the btest program, type:

    unix> make btest
    unix> ./btest [optional cmd line args]

You will need to recompile btest each time you change your bits.c
program. When moving from one platform to another, you will want to
get rid of the old version of btest and generate a new one.  Use the
commands:

    unix> make clean
    unix> make btest

Btest tests your code for correctness by running millions of test
cases on each function.  It tests wide swaths around well known corner
cases such as Tmin and zero for integer puzzles, and zero, inf, and
the boundary between denormalized and normalized numbers for floating
point puzzles. When btest detects an error in one of your functions,
it prints out the test that failed, the incorrect result, and the
expected result, and then terminates the testing for that function.

Here are the command line options for btest:

  unix> ./btest -h
  Usage: ./btest [-hg] [-r <n>] [-f <name> [-1|-2|-3 <val>]*] [-T <time limit>]
    -1 <val>  Specify first function argument
    -2 <val>  Specify second function argument
    -3 <val>  Specify third function argument
    -f <name> Test only the named function
    -g        Format output for autograding with no error messages
    -h        Print this message
    -r <n>    Give uniform weight of n for all problems
    -T <lim>  Set timeout limit to lim

Examples:

  Test all functions for correctness and print out error messages:
  unix> ./btest

  Test all functions in a compact form with no error messages:
  unix> ./btest -g

  Test function foo for correctness:
  unix> ./btest -f foo

  Test function foo for correctness with specific arguments:
  unix> ./btest -f foo -1 27 -2 0xf

Btest does not check your code for compliance with the coding
guidelines.  Use dlc to do that.

*******************
3. Helper Programs
*******************

We have included the ishow and fshow programs to help you decipher
integer and floating point representations respectively. Each takes a
single decimal or hex number as an argument. To build them type:

    unix> make

Example usages:

    unix> ./ishow 0x27
    Hex = 0x00000027,	Signed = 39,	Unsigned = 39

    unix> ./ishow 27
    Hex = 0x0000001b,	Signed = 27,	Unsigned = 27

    unix> ./fshow 0x15213243
    Floating point value 3.255334057e-26
    Bit Representation 0x15213243, sign = 0, exponent = 0x2a, fraction = 0x213243
    Normalized.  +1.2593463659 X 2^(-85)

    linux> ./fshow 15213243
    Floating point value 2.131829405e-38
    Bit Representation 0x00e822bb, sign = 0, exponent = 0x01, fraction = 0x6822bb
    Normalized.  +1.8135598898 X 2^(-126)

/* 
 * CS:APP Data Lab 
 * 
 * <여기에 이름과 사용자 ID를 입력하세요>
 * 
 * bits.c - Lab 솔루션을 포함하는 소스 파일.
 *          이 파일을 강사에게 제출하세요.
 *
 * 경고: <stdio.h> 헤더를 포함하지 마세요; dlc 컴파일러가 혼동할 수 있습니다.
 * <stdio.h>를 포함하지 않고도 디버깅을 위해 printf를 사용할 수 있지만,
 * 컴파일러 경고가 발생할 수 있습니다. 일반적으로 컴파일러 경고를 무시하는
 * 것은 좋지 않은 습관이지만, 이 경우에는 괜찮습니다.  
 */

#if 0
/*
 * 학생을 위한 지침:
 *
 * 1단계: 다음 지침을 주의 깊게 읽으세요.
 */

이 소스 파일에 있는 함수 모음을 편집하여 Data Lab 솔루션을 제공하세요.

정수 코딩 규칙:

각 함수의 "return" 문을 함수 구현을 위한 하나 이상의 C 코드 라인으로 대체하세요.
코드는 다음 스타일을 준수해야 합니다:

int Funct(arg1, arg2, ...) {
    /* 구현이 어떻게 작동하는지 간략한 설명 */
    int var1 = Expr1;
    ...
    int varM = ExprM;

    varJ = ExprJ;
    ...
    varN = ExprN;
    return ExprR;
}

각 "Expr"는 오직 다음을 사용한 표현식이어야 합니다:
1. 0에서 255(0xFF)까지의 정수 상수. 0xffffffff와 같은 큰 상수를 사용할 수 없습니다.
2. 함수 인수와 지역 변수(전역 변수는 안됨).
3. 단항 정수 연산자 ! ~
4. 이항 정수 연산자 & ^ | + << >>

일부 문제는 허용되는 연산자의 집합을 더 제한합니다.
각 "Expr"는 여러 연산자로 구성될 수 있습니다. 한 라인당 하나의 연산자로 제한되지 않습니다.

다음은 명시적으로 금지됩니다:
1. if, do, while, for, switch 등의 제어 구조 사용.
2. 매크로 정의 또는 사용.
3. 이 파일에 추가 함수 정의.
4. 함수 호출.
5. &&, ||, -, ?: 등의 다른 연산자 사용.
6. 캐스팅 형태 사용.
7. int 외의 데이터 타입 사용. 즉, 배열, 구조체, 유니언을 사용할 수 없습니다.

기계 가정:
1. 2의 보수, 32비트 정수 표현을 사용합니다.
2. 오른쪽 시프트는 산술적으로 수행됩니다.
3. 시프트 양이 0보다 작거나 31보다 큰 경우 예측할 수 없는 동작을 합니다.

허용되는 코딩 스타일 예시:
  /*
   * pow2plus1 - 2^x + 1을 반환합니다, 여기서 0 <= x <= 31
   */
  int pow2plus1(int x) {
     /* 시프트를 사용하여 2의 거듭제곱을 계산하는 능력을 활용 */
     return (1 << x) + 1;
  }

  /*
   * pow2plus4 - 2^x + 4를 반환합니다, 여기서 0 <= x <= 31
   */
  int pow2plus4(int x) {
     /* 시프트를 사용하여 2의 거듭제곱을 계산하는 능력을 활용 */
     int result = (1 << x);
     result += 4;
     return result;
  }

부동 소수점 코딩 규칙

부동 소수점 연산을 구현해야 하는 문제의 경우 코딩 규칙이 덜 엄격합니다.
루프 및 조건부 제어를 사용할 수 있습니다.
int와 unsigned를 모두 사용할 수 있습니다.
임의의 정수 및 unsigned 상수를 사용할 수 있습니다.
int 또는 unsigned 데이터에 대한 임의의 산술, 논리, 비교 연산을 사용할 수 있습니다.

명시적으로 금지되는 것:
  1. 매크로 정의 또는 사용.
  2. 이 파일에 추가 함수 정의.
  3. 함수 호출.
  4. 캐스팅 형태 사용.
  5. int 또는 unsigned 외의 데이터 타입 사용. 즉, 배열, 구조체, 유니언을 사용할 수 없습니다.
  6. 부동 소수점 데이터 타입, 연산 또는 상수 사용.

주의 사항:
  1. 솔루션의 적법성을 확인하려면 dlc(데이터 랩 검사기) 컴파일러를 사용하세요.
  2. 각 함수에는 구현에 사용할 수 있는 최대 연산자 수가 있습니다. 최대 연산자 수는 dlc에서 확인합니다.
     할당문('=')은 카운트되지 않습니다; 이를 페널티 없이 원하는 만큼 사용할 수 있습니다.
  3. btest 테스트 하네스를 사용하여 함수의 정확성을 확인하세요.
  4. BDD 검사를 사용하여 함수를 공식적으로 검증하세요.
  5. 각 함수의 최대 연산자 수는 각 함수의 헤더 주석에 나와 있습니다. 
     작성 내용과 이 파일 간에 불일치가 있으면 이 파일을 권위 있는 출처로 간주하세요.

/*
 * 2단계: 코딩 규칙에 따라 다음 함수를 수정하세요.
 * 
 * 중요한 사항. 채점에서 놀라지 않도록:
 * 1. dlc 컴파일러를 사용하여 솔루션이 코딩 규칙을 준수하는지 확인하세요.
 * 2. BDD 검사를 사용하여 솔루션이 올바른 답을 생성하는지 공식적으로 확인하세요.
 */

#endif

//1
/* 
 * bitXor - ~와 &만 사용하여 x^y 구현 
 *   예시: bitXor(4, 5) = 1
 *   허용 연산자: ~ &
 *   최대 연산자: 14
 *   난이도: 1
 */
int bitXor(int x, int y) {
  return 2;
}

/* 
 * tmin - 최소 2의 보수 정수 반환 
 *   허용 연산자: ! ~ & ^ | + << >>
 *   최대 연산자: 4
 *   난이도: 1
 */
int tmin(void) {
  return 2;
}

//2
/*
 * isTmax - x가 최대 2의 보수 숫자이면 1 반환, 그렇지 않으면 0 반환
 *   허용 연산자: ! ~ & ^ | +
 *   최대 연산자: 10
 *   난이도: 1
 */
int isTmax(int x) {
  return 2;
}

/* 
 * allOddBits - 단어의 모든 홀수 비트가 1이면 1 반환
 *   비트는 0(최하위)에서 31(최상위)까지 번호가 매겨집니다
 *   예시: allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1
 *   허용 연산자: ! ~ & ^ | + << >>
 *   최대 연산자: 12
 *   난이도: 2
 */
int allOddBits(int x) {
  return 2;
}

/* 
 * negate - -x 반환 
 *   예시: negate(1) = -1
 *   허용 연산자: ! ~ & ^ | + << >>
 *   최대 연산자: 5
 *   난이도: 2
 */
int negate(int x) {
  return 2;
}

//3
/* 
 * isAsciiDigit - 0x30 <= x <= 0x39 (문자 '0'부터 '9'까지의 ASCII 코드)인 경우 1 반환
 *   예시: isAsciiDigit(0x35) = 1.
 *         isAsciiDigit(0x3a) = 0.
 *         isAsciiDigit(0x05) = 0.
 *   허용 연산자: ! ~ & ^ | + << >>
 *   최대 연산자: 15
 *   난이도: 3
 */
int isAsciiDigit(int x) {
  return 2;
}

/* 
 * conditional - x ? y : z와 동일 
 *   예시: conditional(2, 4, 5) = 4
 *   허용 연산자: ! ~ & ^ | + << >>
 *   최대 연산자: 16
 *   난이도: 3
 */
int conditional(int x, int y, int z) {
  return 2;
}

/* 
 * isLessOrEqual - x <= y이면 1 반환, 그렇지 않으면 0 반환 
 *   예시: isLessOrEqual(4, 5) = 1.
 *   허용 연산자: ! ~ & ^ | + << >>
 *   최대 연산자: 24
 *   난이도: 3
 */
int isLessOrEqual(int x, int y) {
  return 2;
}

//4
/* 
 * logicalNeg - 모든 허용 연산자를 사용하여 ! 연산자 구현, 
 *              !는 제외
 *   예시: logicalNeg(3) = 0, logicalNeg(0) = 1


